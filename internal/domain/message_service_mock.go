// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"sync"
)

// Ensure, that MessageServiceMock does implement MessageService.
// If this is not the case, regenerate this file with moq.
var _ MessageService = &MessageServiceMock{}

// MessageServiceMock is a mock implementation of MessageService.
//
//	func TestSomethingThatUsesMessageService(t *testing.T) {
//
//		// make and configure a mocked MessageService
//		mockedMessageService := &MessageServiceMock{
//			ProcessFunc: func(message *tgbotapi.Update)  {
//				panic("mock out the Process method")
//			},
//		}
//
//		// use mockedMessageService in code that requires MessageService
//		// and then make assertions.
//
//	}
type MessageServiceMock struct {
	// ProcessFunc mocks the Process method.
	ProcessFunc func(message *tgbotapi.Update)

	// calls tracks calls to the methods.
	calls struct {
		// Process holds details about calls to the Process method.
		Process []struct {
			// Message is the message argument value.
			Message *tgbotapi.Update
		}
	}
	lockProcess sync.RWMutex
}

// Process calls ProcessFunc.
func (mock *MessageServiceMock) Process(message *tgbotapi.Update) {
	if mock.ProcessFunc == nil {
		panic("MessageServiceMock.ProcessFunc: method is nil but MessageService.Process was just called")
	}
	callInfo := struct {
		Message *tgbotapi.Update
	}{
		Message: message,
	}
	mock.lockProcess.Lock()
	mock.calls.Process = append(mock.calls.Process, callInfo)
	mock.lockProcess.Unlock()
	mock.ProcessFunc(message)
}

// ProcessCalls gets all the calls that were made to Process.
// Check the length with:
//
//	len(mockedMessageService.ProcessCalls())
func (mock *MessageServiceMock) ProcessCalls() []struct {
	Message *tgbotapi.Update
} {
	var calls []struct {
		Message *tgbotapi.Update
	}
	mock.lockProcess.RLock()
	calls = mock.calls.Process
	mock.lockProcess.RUnlock()
	return calls
}
